# This is the name of the workflow, which will be displayed in the GitHub Actions tab.
name: QA Test General

# Principle of least privilege for GITHUB_TOKEN
permissions:
  contents: read

# Manual trigger only (no cron) to avoid costs and automatic runs
on:
  workflow_dispatch:

# Ensure only one run at a time
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # --- Lighthouse: performance/SEO/best practices ---
  lighthouse:
    name: "Test de Performance (Lighthouse)"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: The BASE_URL variable is not defined in Settings > Secrets and variables > Actions."
            exit 1
          fi
          if echo "${{ vars.BASE_URL }}" | grep -qi 'google\.com'; then
            echo "Error: Do not use google.com as BASE_URL. Please define a real URL to test."
            exit 1
          fi
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install -g @lhci/cli
      - name: "Run Lighthouse CI (1 run to optimize)"
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
        run: |
          lhci autorun             --collect.url="${{ vars.BASE_URL }}"             --collect.numberOfRuns=1             --upload.target=temporary-public-storage

  # --- Pa11y (Axe): accesibilidad ---
  a11y:
    name: "Test de Accesibilidad (Pa11y)"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: The BASE_URL variable is not defined."
            exit 1
          fi
          if echo "${{ vars.BASE_URL }}" | grep -qi 'google\.com'; then
            echo "Error: Do not use google.com as BASE_URL."
            exit 1
          fi
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install -g pa11y-ci
      - name: "Run Pa11y with Axe"
        run: |
          BASE="${{ vars.BASE_URL }}"; BASE="${BASE%/}"
          cat > pa11yci.json <<EOF
          {
            "defaults": {
              "timeout": 30000,
              "runners": ["axe"],
              "chromeLaunchConfig": { "args": ["--no-sandbox","--disable-setuid-sandbox"] }
            },
            "urls": [
              "$BASE/",
              "$BASE/contacto/",
              "$BASE/blog/"
            ]
          }
          EOF
          pa11y-ci --config pa11yci.json

  # --- ZAP Baseline: seguridad pasiva ---
  zap_baseline:
    name: "Test de Seguridad Basico (ZAP)"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: The BASE_URL variable is not defined."
            exit 1
          fi
          if echo "${{ vars.BASE_URL }}" | grep -qi 'google\.com'; then
            echo "Error: Do not use google.com as BASE_URL."
            exit 1
          fi
      - uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "${{ vars.BASE_URL }}"
          fail_action: false
          allow_issue_writing: false
          # omitimos artifact_name para evitar conflictos de nombres

  # --- WPScan (oficial vÃ­a Docker) ---
  wpscan:
    name: "Test de WordPress (WPScan)"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: The BASE_URL variable is not defined."
            exit 1
          fi
          if echo "${{ vars.BASE_URL }}" | grep -qi 'google\.com'; then
            echo "Error: Do not use google.com as BASE_URL."
            exit 1
          fi
      - name: "Check if target is WordPress (and accessible)"
        id: check_wp
        run: |
          CODE=$(curl -sL -o /tmp/index.html -w "%{http_code}" --max-time 10 "${{ vars.BASE_URL }}/" || true)
          if [ "$CODE" = "401" ] || [ "$CODE" = "403" ] || ! grep -qi 'wp-content' /tmp/index.html; then
            echo "is_wordpress=false" >> $GITHUB_OUTPUT
          else
            echo "is_wordpress=true" >> $GITHUB_OUTPUT
          fi
      - name: "Run WPScan (official Docker image)"
        if: steps.check_wp.outputs.is_wordpress == 'true'
        run: |
          docker run --rm \
            -e WPSCAN_API_TOKEN="${{ secrets.WPSCAN_API_TOKEN }}" \
            wpscanteam/wpscan \
              --url "${{ vars.BASE_URL }}" \
              --stealthy \
              --ignore-main-redirect \
              --format cli \
              --api-token "${{ secrets.WPSCAN_API_TOKEN }}"
