# Name for this workflow, which will be displayed in the Actions tab.
name: QA Test General

# FINAL SECURITY BEST PRACTICE:
# Explicitly set the permissions for the GITHUB_TOKEN to read-only.
# This follows the principle of least privilege.
permissions:
  contents: read

# Controls when the workflow will run.
on:
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A concurrency group to ensure that only one instance of this workflow runs at a time.
# If a new workflow is triggered while one is running, the old one will be canceled.
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

# Defines the jobs that will run as part of this workflow.
jobs:
  # Job to run Lighthouse CI for performance and best practices audit.
  lighthouse:
    name: "Test de Performance (Lighthouse)"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: La variable BASE_URL no está definida en Settings > Secrets and variables > Actions."
            exit 1
          fi
          if echo "${{ vars.BASE_URL }}" | grep -qi 'google\.com'; then
            echo "Error: No uses google.com como BASE_URL. Por favor, define una URL real para probar."
            exit 1
          fi
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install -g @lhci/cli
      - name: "Run Lighthouse CI (1 corrida para optimizar)"
        run: |
          lhci autorun \
            --collect.url="${{ vars.BASE_URL }}" \
            --collect.numberOfRuns=1 \
            --upload.target=temporary-public-storage

  # Job to run Pa11y for accessibility testing using the Axe engine.
  a11y:
    name: "Test de Accesibilidad (Pa11y)"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: La variable BASE_URL no está definida."
            exit 1
          fi
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install -g pa11y-ci pa11y-runner-axe
      - name: "Run Pa11y with Axe"
        run: |
          cat > pa11yci.json << 'EOF'
          {
            "defaults": { "timeout": 30000 },
            "urls": [
              "${{ vars.BASE_URL }}/",
              "${{ vars.BASE_URL }}/contacto/",
              "${{ vars.BASE_URL }}/blog/"
            ],
            "chromeLaunchConfig": { "args": ["--no-sandbox"] }
          }
          EOF
          pa11y-ci --config pa11yci.json --runner axe

  # Job to run OWASP ZAP baseline scan for basic security vulnerabilities.
  zap_baseline:
    name: "Test de Seguridad Basico (ZAP)"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: La variable BASE_URL no está definida."
            exit 1
          fi
      - uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "${{ vars.BASE_URL }}"
          fail_action: false

  # Job to run WPScan for WordPress-specific vulnerabilities.
  wpscan:
    name: "Test de WordPress (WPScan)"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: La variable BASE_URL no está definida."
            exit 1
          fi
      - uses: actions/checkout@v4
      - name: "Check if target is WordPress (y accesible)"
        id: check_wp
        run: |
          set -e
          CODE=$(curl -sL -o /tmp/index.html -w "%{http_code}" --max-time 10 "${{ vars.BASE_URL }}/" || true)
          if [ "$CODE" = "401" ] || [ "$CODE" = "403" ]; then
            echo "is_wordpress=false" >> $GITHUB_OUTPUT
            echo "Sitio protegido (HTTP $CODE). Saltando WPScan."
            exit 0
          fi
          if grep -qi 'wp-content' /tmp/index.html; then
            echo "is_wordpress=true" >> $GITHUB_OUTPUT
          else
            echo "is_wordpress=false" >> $GITHUB_OUTPUT
          fi
      - name: "Run WPScan"
        if: steps.check_wp.outputs.is_wordpress == 'true'
        uses: WTFender/wpscan-action@v1
        with:
          url: "${{ vars.BASE_URL }}"
          token: ${{ secrets.WPSCAN_API_TOKEN }}
          options: >-
            --stealthy
            --ignore-main-redirect
            --format cli
      - name: "Skip WPScan"
        if: steps.check_wp.outputs.is_wordpress == 'false'
        run: echo "El sitio no parece ser WordPress o está protegido. Saltando WPScan."
