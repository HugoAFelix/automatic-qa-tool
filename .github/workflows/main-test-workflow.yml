# This is the name of the workflow, which will be displayed in the GitHub Actions tab.
name: QA Test General

# As a security best practice, this explicitly sets the permissions for the
# GITHUB_TOKEN to be read-only, following the principle of least privilege.
permissions:
  contents: read

# This section defines the events that trigger the workflow.
on:
  # 'workflow_dispatch' allows the workflow to be run manually from the Actions tab.
  workflow_dispatch:

# The concurrency group ensures that only one instance of this workflow runs at a time for this branch.
# If a new workflow run is triggered while one is already in progress, the older one will be canceled.
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

# This section defines the jobs that will be executed as part of the workflow.
jobs:
  # This job runs Lighthouse CI to audit performance, SEO, and best practices.
  lighthouse:
    name: "Test de Performance (Lighthouse)"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      # FINAL FIX: Added a check to prevent running against google.com
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: The BASE_URL variable is not defined in Settings > Secrets and variables > Actions."
            exit 1
          fi
          if echo "${{ vars.BASE_URL }}" | grep -qi 'google\.com'; then
            echo "Error: Do not use google.com as BASE_URL. Please define a real URL to test."
            exit 1
          fi
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install -g @lhci/cli
      - name: "Run Lighthouse CI (1 run to optimize)"
        run: |
          lhci autorun \
            --collect.url="${{ vars.BASE_URL }}" \
            --collect.numberOfRuns=1 \
            --upload.target=temporary-public-storage

  # This job runs Pa11y to perform accessibility testing using the Axe engine.
  a11y:
    name: "Test de Accesibilidad (Pa11y)"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: The BASE_URL variable is not defined."
            exit 1
          fi
          if echo "${{ vars.BASE_URL }}" | grep -qi 'google\.com'; then
            echo "Error: Do not use google.com as BASE_URL."
            exit 1
          fi
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install -g pa11y-ci
      - name: "Run Pa11y with Axe"
        run: |
          BASE="${{ vars.BASE_URL }}"; BASE="${BASE%/}"
          cat > pa11yci.json <<EOF2
          {
            "defaults": { "timeout": 30000 },
            "urls": [
              "$BASE/",
              "$BASE/contacto/",
              "$BASE/blog/"
            ],
            "chromeLaunchConfig": { "args": ["--no-sandbox"] }
          }
          EOF2
          pa11y-ci --config pa11yci.json

  # This job runs an OWASP ZAP baseline scan to find basic, passive security vulnerabilities.
  zap_baseline:
    name: "Test de Seguridad Basico (ZAP)"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: The BASE_URL variable is not defined."
            exit 1
          fi
          if echo "${{ vars.BASE_URL }}" | grep -qi 'google\.com'; then
            echo "Error: Do not use google.com as BASE_URL."
            exit 1
          fi
      - uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "${{ vars.BASE_URL }}"
          fail_action: false
          allow_issue_writing: false

  # This job runs WPScan to find WordPress-specific vulnerabilities.
  wpscan:
    name: "Test de WordPress (WPScan)"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "Sanity check BASE_URL"
        run: |
          if [ -z "${{ vars.BASE_URL }}" ]; then
            echo "Error: The BASE_URL variable is not defined."
            exit 1
          fi
          if echo "${{ vars.BASE_URL }}" | grep -qi 'google\.com'; then
            echo "Error: Do not use google.com as BASE_URL."
            exit 1
          fi
      - uses: actions/checkout@v4
      - name: "Check if target is WordPress (and accessible)"
        id: check_wp
        run: |
          CODE=$(curl -sL -o /tmp/index.html -w "%{http_code}" --max-time 10 "${{ vars.BASE_URL }}/" || true)
          if [ "$CODE" = "401" ] || [ "$CODE" = "403" ] || ! grep -qi 'wp-content' /tmp/index.html; then
            echo "is_wordpress=false" >> $GITHUB_OUTPUT
          else
            echo "is_wordpress=true" >> $GITHUB_OUTPUT
          fi
      - name: "Run WPScan"
        if: steps.check_wp.outputs.is_wordpress == 'true'
        uses: wpscanteam/wpscan-action@v5
        with:
          args: --url ${{ vars.BASE_URL }} --stealthy --ignore-main-redirect --format cli
          api-token: ${{ secrets.WPSCAN_API_TOKEN }}
      - name: "Skip WPScan"
        if: steps.check_wp.outputs.is_wordpress == 'false'
        run: echo "Site does not appear to be WordPress or is protected. Skipping WPScan."
